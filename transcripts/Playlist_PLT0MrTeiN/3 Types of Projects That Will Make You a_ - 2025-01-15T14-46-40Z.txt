you know how all of us youtubers are
always telling you to go build projects
and actually apply what you're learning
well if you've actually tried to do this
so if you googled something like
programming projects to build you may
have noticed there's an overwhelming
amount of projects that you can actually
build which leads you to that next
dilemma which is okay which one should i
build or why should i build this one
over that one and it's critical that you
answer this question correctly otherwise
you're going to waste a lot of time so
in this video i'm going to talk about
the three different types of projects
that you're going to want to build to
put yourself in the driver's seat to get
hired i'm going to go over the exact
types of projects and why they're
important with examples so you don't
have that excuse of oh i don't know what
to build or something like that so
without any further ado let's dive in so
diving right in here the three types of
projects are really three levels of
projects and i'm going to explain why
each is important the first level of
projects that you're going to want to
work on are what i call simple projects
by the way the term simple does not mean
easy for some of you these projects
might be very challenging some good
examples that would fit in the simple
category of projects would be something
like a digital clock app right you
literally just show the time and you
show the second so you have to change
every second maybe it would be something
like a to-do app we all know about that
where you can add to-do's and cross them
off or an expense tracker where you can
simply have a user add in expenses and
show them in a table projects that fit
this category are typically not always
but typically either low in complexity
meaning they do just one two maybe three
things they are usually less than 200
lines of code sometimes they may be more
but usually they're less they're pretty
small applications and also they
shouldn't use any libraries or
frameworks in other words you really
want to focus on the fundamentals you
want to focus on syntax and problem
solving this first level of projects is
crucial to developing real programming
skills and real foundation so yes you're
going to learn about syntax you're going
to apply a lot of what you're learning
you're going to learn about control flow
statements
more important than that you're going to
learn how to problem solve right so
you're going to learn how to take a
problem like building a project you're
going to break it down into smaller
parts work through each part and when
something doesn't work you have to go
back and debug and analyze your code and
that's what really makes a programmer a
programmer and that's where you're
really going to get out of the first
level projects i generally recommend
building anywhere from four to eight
projects at this level and by the way
don't overdo this like don't add tons of
really cool features don't spend tons of
time making this look amazing just do
the bare minimum to call this complete
and by the way i will leave a link in
the description of all different
examples of projects types for each of
these levels so definitely check that
out now one of the simplest projects
that you could actually take up right
now actually doesn't even require coding
it does however require that you go down
below here and smash the subscribe
button now this won't actually make you
a programmer but you could try putting
it on your resume and seeing how that
goes okay so on to the level two
projects which i like to call the
intermediate level of projects now the
key thing about this level of projects
is that we're really increasing the
complexity level some examples of
projects that come to mind that could be
categorized as intermediate are a lot of
video games actually so space invaders
you've got snake gain tetris game which
is really challenging and then also
something like pong would be pretty
challenging as well beyond games there's
something like the calculator app which
seems simple but for a lot of people is
really a definite step up and complexity
down to something like a web scraper
where you scrape craigslist let's say
and maybe send yourself an email once a
day with all of the available apartment
listings as far as what actually defines
an intermediate project i'll be honest
with you this is sometimes very hard to
figure out you know you may build a
project and it'll be in that blurry line
between the two but there are some basic
qualities or rules of thumb that i find
for level two projects the first thing i
found is that they typically do five or
more things so if you look at the tetris
app there's a lot of things going on
there right like there are a lot of
different things that you actually have
to do as a programmer same with the
calculator there are a lot of different
functions of it and usually if they do
five or more that's a good sign now the
next thing as far as lines of code
actually the general rule is that it
typically doesn't go over 500 lines of
code so i actually don't think there's a
good gauge here as well but just don't
go over because usually if it goes over
you might start bleeding into that next
level which is a level three project the
last rule of thumb here is that you'll
have a minimal use of libraries or
frameworks so you may use one or two to
help you with certain things but you
still want to work along the
fundamentals and really work on handling
all the complexity now how many
intermediate projects should you
actually build so i typically recommend
building a minimum of three but if you
find that you're going through these
pretty easily maybe step it up a little
bit and go with something like four or
five or six
just remember that the reason you're
building these projects is to move into
a higher level of complexity so that
when you get into some of the more
complex apps you're a little more
comfortable so for those of you who can
more practice may be better so on to the
last level of projects here which is
really the top level of projects which i
like to call the capstone projects
capstone projects really put everything
together and have a very high level of
complexity so applications like a social
media clone right so a linkedin clone a
twitter clone a facebook clone a
instagram clone or even something like a
slack clone like a chat app like a real
time chat app or a discord clone or even
something like a fake e-commerce store
so just build an e-commerce store sell
fake stuff you wouldn't actually sell
anything but you get the basic idea
these types of projects should put your
skills to the test and most importantly
they should give you real examples that
you can bring up in an interview that
you actually can do the work that hey
this is how you know that if i come in i
can actually do the work that's expected
of me to me if you put a capstone
project together you're likely worthy of
getting hired by somebody out there what
makes a capstone project a capstone
project well there is no perfect
definition for this but there are some
general rules of thumb that you can
follow the first thing is that they
usually do 10 or more things now if you
think of one of the examples i brought
up like a twitter clone think of all the
things that application actually does
right so there's a registration process
there's a login process there's viewing
all of the tweets on your timeline
there's posting new tweets there's
sending direct messages there's
retweeting there is liking there's quote
tweeting i mean we could just kind of go
on here i would say as long as it does
10 or more things that's usually a good
sign another good rule of thumb for
capstone projects is that you use
integrations so it basically means
different systems outside of your
project right so if you're using like a
front and a back end and on your website
your application maybe you use a
database right that would be considered
an integration or maybe you use an
external api or maybe even some external
software that's running on that server
on that backend server those are all
integrations and they definitely would
add to the complexity the next rule of
thumb is that you should use multiple
libraries and frameworks right so
frameworks and libraries help you to do
what you do as a programmer so you're
not focusing so much on fundamentals but
you're more focusing on how to use these
libraries in real world projects another
typical sign of a capstone project is
that there are more than 500 lines of
code because they're more complex and
lastly and this is my advice here is
that your capstone project should be
interesting right so what i mean by that
is you're going to put this on your
resume and your personal portfolio site
you want to grab a little bit of
attention and i know this term
interesting is subjective but just
basically if you were to tell your
friend your mom your whatever relative
at thanksgiving dinner that you built
this project they would go oh that's
kind of cool that's interesting that's
all you're aiming for now one thing i
want you to notice here is that this
pyramid of projects this section here is
the smallest one compared to the other
two because these projects will take the
most time out of all the projects that
you're going to build so you just can't
build that many of them so what i
typically recommend is that you build
anywhere from at least one to maybe
three projects with two being the
absolute sweet spot at the end of the
day i've seen people get hired with just
a single capstone project but what you
may want to try is build one test the
waters go out and apply and if it
doesn't really work out then go ahead
and try to build a second one i've based
a lot of what i just laid out here from
working with many people in my
mentorship program and in that program
i've worked with a lot of different
people to help change their careers
everything from cooks to musicians to
delivery drivers to help them land their
first gig as a developer and while i
want to make absolutely clear that this
program is not for everybody if you are
committed to making this career change
and you do want to inquire about my
mentorship program i will leave a link
in the description below of how you can
do that just keep in mind that i vet
every single person who comes in the
program so you will have to do a free
intake call to see if it's a good fit so
other than that that's all i've got and
thank you so much for watching and peace
out everybody